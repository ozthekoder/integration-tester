{"version":3,"sources":["../../../src/spec/unit/parser.spec.js"],"names":[],"mappings":"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","file":"parser.spec.js","sourcesContent":["import Parser from '../../lib/parser';\nimport { is, forEachKey, xor } from '../../lib/utility';\nimport ValidationError from '../../lib/utility/custom-errors';\nimport { validation } from '../../lib/config/constants.json';\nimport test1 from '../data/test1.json';\nimport test2 from '../data/test2.json';\nimport test3 from '../data/test3.json';\n\nlet parser, json1, json2, json3, json4, json5, json6, json7, json8, json9, json10, json11, json12, json13;\ndescribe('Parser Class', () => {\n\n  beforeEach(() => {\n    json1 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {},\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json2 = {\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {},\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json3 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {},\n    };\n\n    json4 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$ops\": [],\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {},\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json5 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {\n        \"$expect\": {\n          \"foo\": {\n            \"bar\": {\n              \"$assert\": \"equal\",\n              \"$value\": \"goo\",\n              \"$log\": \"qqq\"\n            },\n            \"baz\": {\n              \"goo\": {\n                \"$assert\": \"equal\",\n                \"$value\": \"qoo\",\n                \"$log\": \"qqq\"\n              },\n              \"woo\": {\n                \"$assert\": \"equal\",\n                \"$value\": \"xoo\",\n                \"$log\": \"qqq\"\n              }\n            }\n          }\n        },\n        \"$waitFor\": {\n          \"foo\": {\n            \"bar\": {\n              \"$value\": \"goo\",\n              \"$log\": \"qqq\"\n            },\n            \"baz\": {\n              \"goo\": {\n                \"$value\": \"qoo\",\n                \"$log\": \"qqq\"\n              },\n              \"woo\": {\n                \"$value\": \"xoo\",\n                \"$log\": \"qqq\"\n              }\n            }\n          }\n        }\n\n      },\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json6 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {\n      },\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json7 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": \"\",\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json8 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {\n        \"$expect\": {\n          \"foo\": {\n            \"bar\": {\n              \"$assert\": \"equal\",\n              \"$value\": \"goo\",\n              \"$log\": \"qqq\"\n            },\n            \"baz\": {\n              \"goo\": {\n                \"$assert\": \"equal\",\n                \"$value\": \"qoo\",\n                \"$log\": \"qqq\"\n              },\n              \"woo\": {\n                \"$assert\": \"equal\",\n                \"$value\": \"xoo\",\n                \"$log\": \"qqq\"\n              }\n            }\n          }\n        },\n        \"$waitFor\": {\n          \"foo\": {\n            \"bar\": {\n              \"$assert\": \"equal\",\n              \"$value\": \"goo\",\n              \"$log\": \"qqq\"\n            },\n            \"baz\": {\n              \"goo\": {\n                \"$value\": \"qoo\",\n                \"$log\": \"qqq\"\n              },\n              \"woo\": {\n                \"$value\": \"xoo\",\n                \"$log\": \"qqq\"\n              }\n            }\n          }\n        }\n\n      },\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json9 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": \"\",\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json10 = {\n      \"$id\": \"1\",\n      \"$log\": \"what should be logged\",\n      \"$name\": \"name of the operation. For reuse later\",\n      \"$before\": [],\n      \"$plugin\": \"http\",\n      \"$op\": \"post\",\n      \"$args\": [],\n      \"$payload\": {\n        \"$expect\": {\n          \"$value\": \"foo\",\n          \"$assert\": \"equal\",\n          \"$log\": 5\n        }\n      },\n      \"$timeout\": 5000,\n      \"$after\": []\n    };\n\n    json11 = {\n      \"$beforeEach\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"be1\",\n          \"$after\": []\n        },\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"be2\",\n          \"$after\": []\n        }\n      ],\n      \"$afterEach\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"ae1\",\n          \"$after\": []\n        },\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"ae2\",\n          \"$after\": []\n        }\n      ],\n      \"$before\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"before\",\n          \"$after\": []\n        }\n      ],\n      \"$ops\": [{\n        \"$beforeEach\": [],\n        \"$afterEach\": [],\n        \"$before\": [],\n        \"$op\": \"op1\",\n        \"$after\": []\n      },\n      {\n        \"$beforeEach\": [],\n        \"$afterEach\": [],\n        \"$before\": [],\n        \"$op\": \"op2\",\n        \"$after\": []\n      }\n      ],\n      \"$after\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"after\",\n          \"$after\": []\n        }\n      ]\n    };\n\n    json12 = {\n      \"$beforeEach\": [],\n      \"$afterEach\": [],\n      \"$before\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"0\",\n          \"$skip\": true,\n          \"$after\": [\n            {\n              \"$beforeEach\": [],\n              \"$afterEach\": [],\n              \"$before\": [],\n              \"$op\": \"1\",\n              \"$after\": []\n            }\n          ]\n        }\n      ],\n      \"$ops\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"2\",\n          \"$after\": []\n        }\n      ],\n      \"$after\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"3\",\n          \"$after\": []\n        }\n      ]\n    };\n\n    json13 = {\n      \"$beforeEach\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"be1\",\n          \"$after\": []\n        },\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"be2\",\n          \"$after\": []\n        }\n      ],\n      \"$afterEach\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"ae1\",\n          \"$after\": []\n        },\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"ae2\",\n          \"$after\": []\n        }\n      ],\n      \"$before\": [],\n      \"$ops\": [\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"op1\",\n          \"$after\": []\n        },\n        {\n          \"$beforeEach\": [],\n          \"$afterEach\": [],\n          \"$before\": [],\n          \"$op\": \"op2\",\n          \"$after\": []\n        }\n      ],\n      \"$after\": []\n    }\n\n    parser = new Parser(validation);\n  });\n\n  it('is defined', () => {\n    expect(Parser).to.be.ok;\n  });\n\n  it('and can be created', () => {\n    expect(parser).to.be.ok;\n    expect(parser.types).to.be.a('object');\n    expect(parser.keys).to.be.a('object');\n    expect(parser.designator).to.be.a('string');\n    expect(parser.recursive).to.be.a('array');\n  });\n\n  describe('validateDesignator method', () => {\n    it('should be defined', () => {\n      expect(parser.validateDesignator).to.be.a('function');\n    });\n\n    it('should return true if all keys have the designator charactor', () => {\n      expect(parser.validateDesignator(json1)).to.be.ok;\n    });\n\n    it('should throw Validation Error when one or more of the keys do not start with the designator charactor', () => {\n      expect(parser.validateDesignator.bind(parser, { \"foo\": \"bar\" })).to.throw(ValidationError);\n    });\n  });\n\n  describe('canHaveKeys method', () => {\n    it('should be defined', () => {\n      expect(parser.canHaveKeys).to.be.a('function');\n    });\n\n    it('should return true if all keys on the json are expected to be there', () => {\n      expect(parser.canHaveKeys(json1)).to.be.ok;\n    });\n\n    it('should throw Validation Error when the given doesn\\'t belong the json', () => {\n      expect(parser.canHaveKeys.bind(parser, { \"foo\": \"bar\" })).to.throw(ValidationError);\n    });\n  });\n\n  describe('generateDefault method', () => {\n    it('should be defined', () => {\n      expect(parser.generateDefault).to.be.a('function');\n    });\n\n    it('should return empty string if no parameter passed', () => {\n      expect(parser.generateDefault()).to.equal('');\n    });\n\n    it('should return a uuid when $uuid is passed as an argument', () => {\n      expect(parser.generateDefault('$uuid')).to.be.a('string');\n      expect(parser.generateDefault('$uuid').length).to.equal(36)\n    });\n  });\n\n\n  describe('mustHaveKeys method', () => {\n    it('should be defined', () => {\n      expect(parser.mustHaveKeys).to.be.a('function');\n    });\n\n    it('should return true if no required keys are missing in the json', () => {\n      expect(parser.mustHaveKeys(json1)).to.be.ok;\n    });\n\n    it('should throw Validation Error when a required is not found on the json and it has no default value to be given', () => {\n      expect(parser.canHaveKeys.bind(parser, { \"foo\": \"bar\" })).to.throw(ValidationError);\n    });\n\n    it('should return true if a required key is not found but the key has a default value defined', () => {\n      expect(parser.mustHaveKeys(json3)).to.be.ok;\n      expect(json3.$beforeEach).to.deep.equal([]);\n      expect(json3.$afterEach).to.deep.equal([]);\n      expect(json3.$before).to.deep.equal([]);\n      expect(json3.$after).to.deep.equal([]);\n    });\n  });\n\n  describe('eitherOrKeys method', () => {\n    it('should be defined', () => {\n      expect(parser.eitherOrKeys).to.be.a('function');\n    });\n\n    it('should return true if only one of the given keys exist on the object', () => {\n      expect(parser.eitherOrKeys(json1)).to.equal(true);\n    });\n\n    it('should throw ValidationError if there are more then one of the given keys', () => {\n      expect(parser.eitherOrKeys.bind(parser, json4)).to.throw(ValidationError);\n    });\n  });\n\n  describe('anyKeys method', () => {\n    it('should be defined', () => {\n      expect(parser.anyKeys).to.be.a('function');\n    });\n\n    it('should return true if at least one of the given keys is present', () => {\n      expect(parser.anyKeys(json5)).to.equal(true);\n    });\n\n    it('should throw ValidationError if none of the keys exist', () => {\n      expect(parser.anyKeys.bind(parser, json6)).to.throw(ValidationError);\n    });\n  });\n\n  describe('requiredKeys method', () => {\n    it('should be defined', () => {\n      expect(parser.requiredKeys).to.be.a('function');\n    });\n\n    it('should return true if all required keys are present', () => {\n      expect(parser.requiredKeys(json1)).to.equal(true);\n    });\n\n    it('should throw ValidationError if any of the requirements are missing', () => {\n      expect(parser.requiredKeys.bind(parser, json7)).to.throw(ValidationError);\n    });\n  });\n\n  describe('validateLeafNode method', () => {\n    it('should be defined', () => {\n      expect(parser.validateLeafNode).to.be.a('function');\n    });\n\n    it('should return true if the leaf node validation succeeds', () => {\n      const keys = {\n        \"leaf\": {\n          \"must\": [\n            \"$value\",\n            \"$assert\"\n          ],\n          \"can\": [\n            \"$value\",\n            \"$assert\",\n            \"$log\"\n          ]\n        }\n      };\n      expect(parser.validateLeafNode(json5.$payload.$expect.foo.bar, keys.leaf)).to.equal(true);\n    });\n\n    it('should throw ValidationError if the leaf node validation fails', () => {\n      const keys = {\n        \"leaf\": {\n          \"must\": [\n            \"$value\"\n          ],\n          \"can\": [\n            \"$value\",\n            \"$log\"\n          ]\n        }\n      };\n\n      expect(parser.validateLeafNode.bind(parser, json8.$payload.$waitFor.foo.bar, keys.leaf)).to.throw(ValidationError);\n    });\n  });\n\n\n  describe('validateLeafNodes method', () => {\n    it('should be defined', () => {\n      expect(parser.validateLeafNodes).to.be.a('function');\n    });\n\n    it('should return true if all leaf nodes are valid', () =>{\n      expect(parser.validateLeafNodes(json5))\n    });\n\n    it('should throw ValidationError if any of the leaf nodes are invalid', () => {\n      expect(parser.validateLeafNodes.bind(parser, json8)).to.throw(ValidationError);\n    });\n  });\n\n  describe('isLeafNode method', () => {\n    it('should be defined', () => {\n      expect(parser.isLeafNode).to.be.a('function');\n    });\n\n    it('should return true if the node is a leaf node', () =>{\n      expect(parser.isLeafNode({ \"$foo\": \"bar\", \"$goo\": \"baz\" })).to.equal(true);\n    });\n\n    it('should return false if the node is not a leaf node', () => {\n      expect(parser.isLeafNode({\"$aaa\": \"bbb\", \"w$w\": \"eee\"})).to.equal(false);\n    });\n  });\n\n  describe('isDesignatedKey method', () => {\n    it('should be defined', () => {\n      expect(parser.isDesignatedKey).to.be.a('function');\n    });\n\n    it('should return true if the key is a designated key', () =>{\n      expect(parser.isDesignatedKey(\"$foo\")).to.equal(true);\n    });\n\n    it('should return false if the key is not a designated key', () => {\n      expect(parser.isDesignatedKey(\"eee\")).to.equal(false);\n    });\n  });\n\n  describe('validateTypes method', () => {\n    it('should be defined', () => {\n      expect(parser.validateTypes).to.be.a('function');\n    });\n\n    it('should return true if all the value types are what\\'s expected', () =>{\n      expect(parser.validateTypes(json9)).to.equal(true);\n    });\n\n    it('should throw a ValidationError if any of the types are not correct', () => {\n      expect(parser.validateTypes.bind(parser, json10)).to.throw(ValidationError);\n    });\n  });\n\n  describe('validate method', () => {\n    it('should be defined', () => {\n      expect(parser.validate).to.be.a('function');\n    });\n\n    it('should return true if the blueprint is valid', () => {\n      expect(parser.validate(test1)).to.equal(true);\n    });\n\n    it.skip('should throw a ValidationError if any of the required keys are missing or keys that are not supposed be there are there', () => {\n      expect(parser.validate.bind(parser, test2)).to.throw(ValidationError);\n    });\n\n    it('should throw a ValidationError if any of the values are not of required type', () => {\n      expect(parser.validate.bind(parser, test3)).to.throw(ValidationError);\n    });\n\n  });\n\n  describe('flatten method', () => {\n    it('should be defined', () => {\n      expect(parser.flatten).to.be.a('function');\n    });\n\n    it('should successfully flatten all recursive fields into an array and remove recursive fields from each item', () => {\n      const flat = parser.flatten(json11);\n      expect(flat.length).to.equal(12);\n      expect(flat[0].$op).to.equal('before');\n      expect(flat[11].$op).to.equal('after');\n      flat.forEach((op, i) => {\n        if (op.$op === 'op1' || op.$op === 'op2') {\n          expect(flat[i-1].$op).to.equal('be2');\n          expect(flat[i-2].$op).to.equal('be1');\n          expect(flat[i+1].$op).to.equal('ae1');\n          expect(flat[i+2].$op).to.equal('ae2');\n        }\n      });\n    });\n\n    it('should skip the operations with $skip: true', () => {\n      const flat = parser.flatten(json12);\n      expect(flat.length).to.equal(2);\n    });\n  });\n\n  describe('addEachOps method', () => {\n    it('should be defined', () => {\n      expect(parser.addEachOps).to.be.a('function');\n    });\n\n    it('should successfully append/prepend beforeEach and afterEach operations to each of the operations', () => {\n      parser.addEachOps(json13);\n      expect(json13).to.deep.equal({\n        \"$before\": [],\n        \"$ops\": [\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"be1\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"be2\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"op1\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"ae1\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"ae2\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"be1\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"be2\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"op2\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"ae1\",\n            \"$after\": []\n          },\n          {\n            \"$beforeEach\": [],\n            \"$afterEach\": [],\n            \"$before\": [],\n            \"$op\": \"ae2\",\n            \"$after\": []\n          }\n        ],\n        \"$after\": []\n      });\n    });\n  });\n\n\n  describe('parse method', () => {\n    beforeEach(() => {\n      stub(parser, 'validate')\n      .onFirstCall()\n      .returns(true);\n      stub(parser, 'flatten').returns([]);\n    });\n\n    after(() => {\n      parser.validate.restore();\n      parser.flatten.restore();\n    });\n\n    it('should be defined', () => {\n      expect(parser.parse).to.be.a('function');\n    });\n\n    it('should return the validated, completed, flattened blueprint', () => {\n      parser.parse(json1);\n      expect(parser.validate).to.have.been.calledWith(json1);\n      expect(parser.flatten).to.have.been.calledWith(json1);\n    });\n\n    it('should throw a ValidationError if the blueprint is invalid', () => {\n      parser.validate.restore();\n      stub(parser, 'validate')\n      .onFirstCall()\n      .returns(false);\n\n      expect(parser.parse.bind(parser, json1)).to.throw(ValidationError);\n    });\n  });\n\n});\n"]}