{"version":3,"sources":["../../../src/spec/unit/utility.spec.js"],"names":[],"mappings":"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","file":"utility.spec.js","sourcesContent":["import { is, forEachKey, xor, getReferences, applyReferences } from '../../lib/utility';\n\ndescribe('Utility', () => {\n\n  beforeEach(() => {\n  });\n\n  describe('is function', () => {\n    it('should be defined', () => {\n      expect(is).to.be.a('function');\n    });\n\n    it('should return correct string for any type', () => {\n      class Fuckery {\n        constructor() {}\n      };\n\n      const fuckery = new Fuckery();\n      const map = new Map();\n      const set = new Set();\n\n      expect(is(123)).to.equal('number');\n      expect(is('foo')).to.equal('string');\n      expect(is({})).to.equal('object');\n      expect(is([])).to.equal('array');\n      expect(is(fuckery)).to.equal('object');\n      expect(is(map)).to.equal('map');\n      expect(is(set)).to.equal('set');\n      expect(is((new Error()))).to.equal('error');\n      expect(is(null)).to.equal('null');\n      expect(is(undefined)).to.equal('undefined');\n      expect(is(new String('haha'))).to.equal('string');\n      expect(is(global)).to.equal('global');\n    });\n  });\n\n  describe('forEachKey function', () => {\n    it('should be defined', () => {\n      expect(forEachKey).to.be.a('function');\n    });\n\n    it('should execute given function for each key of the object', () => {\n      const obj = {\n        foo: \"bar\",\n        goo: \"baz\"\n      };\n\n      forEachKey(obj, (key, index, keys) => {\n        obj[key] = index;\n      });\n\n      expect(obj.foo).to.equal(0);\n      expect(obj.goo).to.equal(1);\n    });\n  });\n\n  describe('xor function', () => {\n    it('should be defined', () => {\n      expect(xor).to.be.a('function');\n    });\n\n    it('should only return true when there is only one true and all else is false', () => {\n      expect(xor([false])).to.equal(false);\n      expect(xor([false, false])).to.equal(false);\n      expect(xor([true])).to.equal(true);\n      expect(xor([true, true])).to.equal(false);\n      expect(xor([true, false])).to.equal(true);\n      expect(xor([false, true, false, false])).to.equal(true);\n    });\n  });\n\n  describe('applyReferences function', () => {\n    it('should be defined', () => {\n      expect(applyReferences).to.be.a('function');\n    });\n\n    it('should apply the references properly and return a JS object', () => {\n      const goo = { \"qqq\": \"www\" }, faa = [\"a\", \"b\", \"c\"];\n      const toSave = {\n        \"foo\": {\n          \"bar\": \"___#zzzz#___\",\n          \"baz\": {\n            \"goo\": \"___#xxxx#___\",\n            \"faa\": \"___#yyyy#___\",\n            \"eee\": [\"bbb\", \"hhh\", \"___#tttt#___\"],\n            \"rrr\": {\n              \"ggg\": \"___#uuuu#___\"\n            }\n          }\n        }\n      };\n\n      const payload = {\n        \"foo\": {\n          \"bar\": \"minagorum\",\n          \"baz\": {\n            \"goo\": goo,\n            \"faa\": faa,\n            \"eee\": [\"bbb\", \"hhh\", \"hohoho\"],\n            \"rrr\": {\n              \"ggg\": \"nihoha\"\n            }\n          }\n        }\n      };\n      const saved = getReferences(payload, toSave);\n\n      let op = {\n        \"${zzzz}\": {\n          \"qqq\": \"${xxxx}\",\n          \"www\": \"${yyyy}\",\n          \"eee\": [\n            \"qqqqqqq  ${tttt}  qqqqqqqq\"\n          ],\n          \"fff\": {\n            \"ggg\": \"yoo   fasdas${uuuu} adadasda\"\n          }\n        }\n      };\n      let _op = {\n        \"minagorum\": {\n          \"qqq\": {\n            \"qqq\": \"www\"\n          },\n          \"www\": [\n            \"a\",\n            \"b\",\n            \"c\"\n          ],\n          \"eee\": [\"qqqqqqq  hohoho  qqqqqqqq\"],\n          \"fff\": {\n            \"ggg\": \"yoo   fasdasnihoha adadasda\"\n          }\n        }\n      };\n      op = applyReferences(saved, op)\n      expect(op).to.deep.equal(_op);\n    });\n  });\n\n\n  describe('getReferences function', () => {\n    it('should be defined', () => {\n      expect(getReferences).to.be.a('function');\n    });\n\n    it('should collect all references from the given payload and save clause', () => {\n      const goo = { \"qqq\": \"www\" }, faa = [\"a\", \"b\", \"c\"];\n      const toSave = {\n        \"foo\": {\n          \"bar\": \"___#11111#___\",\n          \"baz\": {\n            \"goo\": \"___#22222#___\",\n            \"faa\": \"___#33333#___\"\n          }\n        }\n      };\n\n      const payload = {\n        \"foo\": {\n          \"bar\": \"minagorum\",\n          \"baz\": {\n            \"goo\": goo,\n            \"faa\": faa\n          }\n        }\n      };\n\n      expect(getReferences(payload, toSave)).to.deep.equal({\n        \"11111\": \"minagorum\",\n        \"22222\": goo,\n        \"33333\": faa,\n      });\n    });\n  });\n\n});\n"]}