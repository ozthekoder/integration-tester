{"version":3,"sources":["../../src/lib/tester.js"],"names":[],"mappings":"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","file":"tester.js","sourcesContent":["import Promise from 'bluebird';\nimport glob from 'glob';\nimport tape from 'tape';\nimport fs from  'fs';\nimport converter from 'tap-xunit';\nimport PluginManager from './plugin-manager';\nimport Runner from './runner';\nimport Parser from './parser';\nimport chain from './async';\nimport defaults from './config/config.json';\nimport { validation } from './config/constants.json';\n\nimport {\n  is,\n  forEachKey,\n  xor,\n  isJsonSafePrimitive,\n  generateAssertions,\n  getAllAssertions,\n  countAssertions\n} from './utility';\n\n\nexport default class Tester {\n  constructor(tests = [], config = defaults) {\n    this.config = Object.assign(defaults, config);\n    this.pluginManager = new PluginManager();\n    this.tests = tests;\n    this.runner = new Runner(this.pluginManager);\n    this.parser = new Parser(validation);\n    this.consoleStream = null;\n    this.reportStream = null;\n    this.tapToXUnitConverter = converter();\n  }\n\n  startStreams() {\n    const streams = Object.keys(this.config.output);\n    streams.forEach((outputType) => this.config.output[outputType] ? this[outputType].call(this) : false );\n  }\n\n  console() {\n    this.consoleStream = tape.createStream();\n    this.consoleStream.pipe(process.stdout);\n  }\n\n  report() {\n    const writeStream = fs.createWriteStream(this.config.output.report);\n    this.reportStream = tape.createStream();\n    this.reportStream.pipe(this.tapToXUnitConverter).pipe(writeStream);\n  }\n\n  registerNativePlugins(ops) {\n    const { plugins } = this.config;\n    const pluginsForOps = ops.reduce((prev, current) => {\n      prev[current.$plugin] = true;\n      return prev;\n    }, {});\n    Object\n    .keys(plugins)\n    .filter((plugin) => pluginsForOps[plugin])\n    .map((key) => require(plugins[key].file))\n    .map((Plugin) => new Plugin())\n    .map(this.registerPlugin.bind(this));\n  }\n\n  registerPlugin(plugin) {\n    this.pluginManager.registerPlugin(plugin);\n  }\n\n  prepare() {\n    return new Promise((resolve, reject) => {\n      this.tests = Array.isArray(this.tests) ? this.tests : [this.tests];\n      const ops = this.tests\n      .map(this.parser.parse.bind(this.parser))\n      .reduce((prev, current) => [...prev, ...current], []);\n      const assertionCount = this.runner.plan(ops);\n\n      this.registerNativePlugins(ops);\n      this.pluginManager.initializePlugins()\n      .then(() => {\n        this.startStreams();\n        this.runner.createTestHarness(assertionCount, null, (t) => {\n          resolve(this.runner.prepare(ops));\n        });\n      });\n    });\n  }\n\n  test(tests) {\n    return chain(tests);\n  }\n};\n"]}