{"version":3,"sources":["../../src/lib/runner.js"],"names":[],"mappings":"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","file":"runner.js","sourcesContent":["import {\n  is,\n  forEachKey,\n  xor,\n  isJsonSafePrimitive,\n  getReferences,\n  applyReferences,\n  generateAssertions,\n  getAllAssertions,\n  countAssertions\n} from './utility';\nimport tape from 'tape';\nimport chain from './async'\n\nexport default class Runner {\n  constructor(pluginManager) {\n    this.pluginManager = pluginManager;\n    this.harness = null;\n  }\n\n  createTestHarness(assertionCount, log, cb) {\n    tape(log ? log : 'Planning the operations..', (t) => {\n      this.harness = t;\n      this.harness.plan(assertionCount);\n      cb(t);\n    });\n  }\n\n  plan(ops) {\n    return ops\n    .map((op) => countAssertions(op.$payload.$expect))\n    .reduce((prev, current) => prev + current, ops.length)\n  }\n\n  prepare(ops) {\n    this.harness.comment(`Running the operations`);\n    return ops.map((op) => this.runOperation.bind(this, op));\n  }\n\n  runOperation(op) {\n    this.harness.comment(op.$log);\n    op = applyReferences(op);\n    let { $args, $op, $plugin, $timeout } = op;\n    return new Promise((resolve, reject) => {\n      const result = this.pluginManager.execute($plugin, $op, $args)\n      .catch(this.checkForHTTPError)\n      .then((response) => {\n        this.harness.pass(`${$plugin}.${$op} successfully completed`);\n        return response;\n      })\n      .then(this.runAssertions.bind(this, op))\n      .then(this.saveRefs.bind(this, op))\n      .then(resolve)\n      .catch(reject);\n\n      setTimeout(reject.bind(null, new Error('Async Operation timed out')), $timeout);\n    });\n  }\n\n  checkForHTTPError(err) {\n    const { status, response } = err;\n    if (status && status >= 300) {\n      return response;\n    } else {\n      throw err;\n    }\n  }\n\n  runAssertions(op, payload) {\n    if(op.$payload && op.$payload.$expect) {\n      const { $expect } = op.$payload;\n      const tests = getAllAssertions(payload, $expect);\n      tests.forEach(test => this.harness[test.assertion].call(this.harness, test.actual, test.expectation, test.log));\n    }\n    return payload;\n  }\n\n  saveRefs(op, payload) {\n    const { $save } = op.$payload;\n    if($save) {\n      const refs = getReferences(payload, $save);\n      this.pluginManager.saveRefs(refs);\n    }\n    return payload;\n  }\n\n};\n\n"]}