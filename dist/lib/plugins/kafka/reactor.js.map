{"version":3,"sources":["../../../../src/lib/plugins/kafka/reactor.js"],"names":[],"mappings":"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","file":"reactor.js","sourcesContent":["const kafka = require('kafka-node');\nconst Promise = require('bluebird');\nconst onDeath = require('death');\nconst cfg = require('../../config/constants.json').kafka;\nlet _topics = {};\n\nmodule.exports = class Reactor {\n  static get topics() { return _topics; }\n  static set topics(topics) { _topics = topics }\n\n  constructor(config=cfg.empty) {\n    try {\n      this.config = config;\n      this.client = new kafka.Client(`${config.host}:${config.port}`);\n      this.offset = new kafka.Offset(this.client);\n      this.consumer = this.getConsumer();\n      this.producer = this.getProducer();\n      this.waitingFor = {};\n      this.producer.on('error', (err) => {\n        console.log(err);\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  initialize() {\n    this.consumer.on('message', this.onMessage.bind(this));\n    return new Promise((resolve, reject) => {\n      this.producer.on('ready', () => { resolve(true) });\n    });\n  }\n\n  closeConnection() {\n    return new Promise((resolve, reject) => {\n      this.client.close(resolve);\n    });\n  }\n\n  getConsumer(topics = this.config.topics, groupId = this.config.groupId) {\n    const autoCommit = false, encoding = 'utf8';\n\n    topics.forEach((t) => {\n      t = { topic: t };\n    });\n    const consumer = new kafka.Consumer(this.client, topics, {groupId, encoding, autoCommit});\n    onDeath(this.onExit.bind(this, consumer, this.closeConnection.bind(this)));\n\n    return consumer;\n  }\n\n  onExit(consumer, close) {\n    consumer.close(true, function(){\n      close().then(process.exit)\n    });\n  }\n\n  getProducer() {\n    try {\n      return new kafka.Producer(this.client);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  consumeMessage(message) {\n    this.commitMessage(message);\n  }\n\n  subscribe(topic, waitFor, cb) {\n    this.waitingFor[topic] = {\n      value: waitFor.value,\n      cb\n    };\n  }\n\n  unsubscribe(topic) {\n    this.waitingFor[topic] = null;\n  }\n\n  onMessage(message) {\n    const waitItem = this.waitingFor[message.topic];\n    if(waitItem && waitItem.value === message.value) {\n      this.unsubscribe(message.topic);\n      waitItem.cb(message);\n    }\n    this.commitMessage(message);\n  }\n\n  createTopics(topics) {\n    return new Promise((resolve, reject) => {\n      const topicsToCreate = topics.filter((topic) => !_topics[topic])\n      if(topicsToCreate.length) {\n        this.producer.createTopics(topicsToCreate, false, (err, data) => {\n          if(err) {\n            reject(err);\n          }\n          topicsToCreate.forEach((topic) => _topics[topic] = 'created');\n          resolve(data);\n        });\n      } else {\n        resolve(topics);\n      }\n    });\n  }\n\n  addTopicsToConsumer(topics) {\n    const topicsToAdd = topics.filter((topic) => _topics[topic] !== 'added')\n    return new Promise((resolve, reject) => {\n      if(topicsToAdd.length) {\n        this.consumer.addTopics(topicsToAdd, (err, added) => {\n          if(err) {\n            reject(err);\n          }\n          topicsToAdd.forEach((topic) => _topics[topic] = 'added');\n          resolve(added);\n        });\n      } else {\n        resolve(topics);\n      }\n    });\n  }\n\n  removeTopicsFromConsumer(topics) {\n    const topicsToRemove = topics.filter((topic) => _topics[topic] === 'added')\n\n    return new Promise((resolve, reject) => {\n      this.consumer.removeTopics(topics, (err, removed) => {\n        if(err) {\n          reject(err);\n        }\n          topicsToRemove.forEach((topic) => _topics[topic] = null);\n\n        resolve(removed);\n      });\n    });\n  }\n\n\n  commitMessage(msg, topics, groupId) {\n    topics = topics || this.config.topics;\n    groupId = groupId || this.config.groupId;\n    const messageOffset = msg.offset;\n    const message = Array.from(topics, t => {\n      return {topic: t, partition: 0, offset: messageOffset};\n    });\n\n    return new Promise((resolve, reject) => {\n      this.offset.commit(groupId, message, (err) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(null);\n      });\n    });\n  }\n}\n"]}