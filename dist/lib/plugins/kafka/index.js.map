{"version":3,"sources":["../../../../src/lib/plugins/kafka/index.js"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAM,UAAU,QAAQ,UAAR,CAAhB;AACA,IAAM,UAAU,QAAQ,WAAR,CAAhB;AACA,IAAM,SAAS,QAAQ,WAAR,CAAf;AACA,IAAM,IAAI,QAAQ,kBAAR,CAAV;;IAEM,W;;;AACJ,yBAAc;AAAA;;AAAA,+FACN,OADM;;AAEZ,UAAK,SAAL;AAFY;AAGb;;;;iCAEY;AACX,WAAK,OAAL,GAAe,yBAAf;AACA,aAAO,KAAK,OAAL,CAAa,UAAb,EAAP;AACD;;;8BAES,K,EAAO,O,EAAsB;AAAA;;AAAA,UAAb,KAAa,yDAAP,KAAO;;AACrC,UAAM,YAAY,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,EAAoC,CAAC,KAAD,CAApC,CAAlB;AACA,aAAO,wBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAK,YAAL,CAAkB,CAAC,KAAD,CAAlB,EACC,IADD,CACM,SADN,EAEC,IAFD,CAEM,UAAC,KAAD,EAAW;AACf,iBAAK,OAAL,CAAa,SAAb,CAAuB,KAAvB,EAA8B,OAA9B,EAAuC,UAAC,OAAD,EAAa;AAClD,mBAAK,wBAAL,CAA8B,CAAC,QAAQ,KAAT,CAA9B;AACA,oBAAQ,KAAR,GAAgB,QAAQ,KAAK,KAAL,CAAW,QAAQ,KAAnB,CAAR,GAAoC,QAAQ,KAA5D;AACA,oBAAQ,OAAR;AACD,WAJD;AAKA,iBAAK,OAAL,CAAa,QAAb,CAAsB,EAAtB,CAAyB,OAAzB,EAAkC,MAAlC;AACD,SATD,EAUC,KAVD,CAUO,MAVP;AAWD,OAZM,CAAP;AAaD;;;4BAEO,O,EAAS;AAAA;;AACf,aAAO,wBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAK,YAAL,CAAkB,CAAC,QAAQ,KAAT,CAAlB,EAAmC,IAAnC,CAAwC,YAAM;AAC5C,iBAAK,OAAL,CAAa,QAAb,CAAsB,IAAtB,CAA2B,CAAC,OAAD,CAA3B,EAAsC,UAAC,GAAD,EAAM,IAAN,EAAe;AACnD,gBAAG,GAAH,EAAQ;AACN,qBAAO,GAAP;AACD;AACD,oBAAQ,IAAR;AACD,WALD;AAMD,SAPD;AAQD,OATM,CAAP;AAUD;;;iCAEY,M,EAAQ;AACnB,aAAO,KAAK,OAAL,CAAa,YAAb,CAA0B,MAA1B,CAAP;AACD;;;wCAEmB,M,EAAQ;AAC1B,aAAO,KAAK,OAAL,CAAa,mBAAb,CAAiC,MAAjC,CAAP;AACD;;;6CAEwB,M,EAAQ;AAC/B,aAAO,KAAK,OAAL,CAAa,wBAAb,CAAsC,MAAtC,CAAP;AACD;;;;;;AAGH,OAAO,OAAP","file":"index.js","sourcesContent":["const Promise = require('bluebird');\nconst Reactor = require('./reactor');\nconst Plugin = require('../plugin');\nconst i = require('./interface.json');\n\nclass KafkaPlugin extends Plugin {\n  constructor() {\n    super('kafka');\n    this.interface = i;\n  }\n\n  initialize() {\n    this.reactor = new Reactor();\n    return this.reactor.initialize();\n  }\n\n  subscribe(topic, waitFor, parse=false) {\n    const addTopics = this.addTopicsToConsumer.bind(this, [topic]);\n    return new Promise((resolve, reject) => {\n      this.createTopics([topic])\n      .then(addTopics)\n      .then((added) => {\n        this.reactor.subscribe(topic, waitFor, (message) => {\n          this.removeTopicsFromConsumer([message.topic]);\n          message.value = parse ? JSON.parse(message.value) : message.value;\n          resolve(message);\n        });\n        this.reactor.consumer.on('error', reject);\n      })\n      .catch(reject);\n    });\n  }\n\n  publish(payload) {\n    return new Promise((resolve, reject) => {\n      this.createTopics([payload.topic]).then(() => {\n        this.reactor.producer.send([payload], (err, data) => {\n          if(err) {\n            reject(err);\n          }\n          resolve(data);\n        });\n      });\n    });\n  }\n\n  createTopics(topics) {\n    return this.reactor.createTopics(topics);\n  }\n\n  addTopicsToConsumer(topics) {\n    return this.reactor.addTopicsToConsumer(topics);\n  }\n\n  removeTopicsFromConsumer(topics) {\n    return this.reactor.removeTopicsFromConsumer(topics);\n  }\n}\n\nmodule.exports = KafkaPlugin;\n"]}